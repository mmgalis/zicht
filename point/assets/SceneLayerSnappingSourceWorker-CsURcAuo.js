import{c$ as f,io as _,e3 as g,jx as w,jy as l,e as v,a as x,jz as b,jA as y,cb as u,aE as L,fv as P,jB as S,jC as V,jD as C,jE as h}from"./index-Mg4rAR0g.js";const I=1e3;function T(t,s,n){const e=w(),o=l(e);return f(o,o,t,.5),f(o,o,s,.5),e[3]=_(o,t),g(o,o,n),e}let m=class{constructor(){this._idToComponent=new Map,this._components=new b(t=>t.bounds),this._edges=new b(t=>t.bounds),this._tmpLineSegment=y(),this._tmpP1=u(),this._tmpP2=u(),this._tmpP3=u(),this.remoteClient=null}async fetchCandidates(t,s){await Promise.resolve(),L(s),await this._ensureEdgeLocations(t,s);const n=[];return this._edges.forEachNeighbor(e=>(this._addCandidates(t,e,n),n.length<I),t.bounds),{result:{candidates:n}}}async _ensureEdgeLocations(t,s){const n=[];if(this._components.forEachNeighbor(i=>{if(i.info==null){const{id:a,uid:d}=i;n.push({id:a,uid:d})}return!0},t.bounds),!n.length)return;const e={components:n},o=await this.remoteClient.invoke("fetchAllEdgeLocations",e,s??{});for(const i of o.components)this._setFetchEdgeLocations(i)}async add(t){const s=new p(t.id,t.bounds);return this._idToComponent.set(s.id,s),this._components.add([s]),{result:{}}}async remove(t){const s=this._idToComponent.get(t.id);if(s){const n=[];this._edges.forEachNeighbor(e=>(e.component===s&&n.push(e),!0),s.bounds),this._edges.remove(n),this._components.remove([s]),this._idToComponent.delete(s.id)}return{result:{}}}_setFetchEdgeLocations(t){const s=this._idToComponent.get(t.id);if(s==null||t.uid!==s.uid)return;const n=P.createView(t.locations),e=new Array(n.count),o=u(),i=u();for(let c=0;c<n.count;c++){n.position0.getVec(c,o),n.position1.getVec(c,i);const r=T(o,i,t.origin),E=new A(s,c,r);e[c]=E}this._edges.add(e);const{objectIds:a,origin:d}=t;s.info={locations:n,objectIds:a,origin:d}}_addCandidates(t,s,n){const{info:e}=s.component,{origin:o,objectIds:i}=e,a=e.locations,d=a.position0.getVec(s.index,this._tmpP1),c=a.position1.getVec(s.index,this._tmpP2);g(d,d,o),g(c,c,o);const r=i[a.componentIndex.get(s.index)];this._addEdgeCandidate(t,r,d,c,n),j(t,r,d,n),j(t,r,c,n)}_addEdgeCandidate(t,s,n,e,o){if(!t.returnEdge)return;const i=l(t.bounds),a=S(n,e,this._tmpLineSegment),d=V(a,i,this._tmpP3);C(t.bounds,d)&&o.push({type:"edge",objectId:s,target:h(d),distance:_(i,d),start:h(n),end:h(e)})}};m=v([x("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],m);const $=m;function j(t,s,n,e){if(!t.returnVertex||!C(t.bounds,n))return;const o=l(t.bounds);e.push({type:"vertex",objectId:s,target:h(n),distance:_(o,n)})}class p{constructor(s,n){this.id=s,this.bounds=n,this.info=null,this.uid=++p.uid}}p.uid=0;class A{constructor(s,n,e){this.component=s,this.index=n,this.bounds=e}}export{$ as default};
