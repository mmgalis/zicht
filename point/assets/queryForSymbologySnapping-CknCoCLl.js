import{b8 as $,hP as P,hQ as E,aE as D,hR as O,hS as q,hT as G,hU as U,hV as W,hW as A,cb as B,bp as H}from"./index-Mg4rAR0g.js";async function N(t,d,p,l,o){const{elevationProvider:f,renderCoordsHelper:i}=t,{elevationInfo:u}=d,{pointsInFeatures:m,spatialReference:h}=l,g=$.fromJSON(h),y=P(u,!0),b=await E(y,g,o);D(o);const c=[],e=new Set,s=new Set,a=new W,n=O(0,0,0,$.WGS84),r=new A,w=B();n.spatialReference=g;const j=t.elevationProvider.spatialReference??t.spatialReference;for(const{objectId:R,points:v}of m){const I=p(R);if(I==null){for(const S of v)c.push(S.z??0);e.add(R);continue}I.isDraped&&s.add(R);const z=I.graphic.geometry;a.setFromElevationInfo(q(z,u)),a.updateFeatureExpressionInfoContext(b,I.graphic,d);for(const{x:S,y:C,z:F}of v)n.x=S,n.y=C,n.z=F??0,await G(n,w,j,0,{signal:o}),U(w,f,a,i,r),c.push(r.z)}return{elevations:c,drapedObjectIds:s,failedObjectIds:e}}async function Q(t,d,p){if(t==null||d.candidates.length===0)return x;const l=t.graphics3DGraphicsByObjectID??t.graphics3DGraphics,o=[],f=[],{renderer:i}=t,u=i!=null&&"arcadeRequired"in i&&i.arcadeRequired?H():null,m=async(e,{graphic:s,graphics3DSymbol:a})=>{const n=await u,r=await t.getRenderingInfoAsync(s,i,n,{signal:p});return r==null?[]:a.queryForSnapping(e,g,r,p)},{candidates:h,spatialReference:g}=d;for(let e=0;e<h.length;++e){const s=h[e],{objectId:a}=s,n=typeof a=="number"?l==null?void 0:l.get(a):void 0;if(n==null)continue;const{graphics3DSymbol:r}=n;r.symbologySnappingSupported&&(o.push(m(s,n)),f.push(e))}if(o.length===0)return x;const y=await Promise.all(o);D(p);const b=[],c=[];for(let e=0;e<y.length;++e){const s=y[e],a=f[e];for(const n of s)b.push(n),c.push(a)}return{candidates:b,sourceCandidateIndices:c}}const x={candidates:[],sourceCandidateIndices:[]};export{N as m,Q as r};
