import{v as u,aT as f,aU as g,aM as m,aV as d,aN as p,aj as v,aW as w,e as n,y as h,a as $}from"./index-Mg4rAR0g.js";import{l as D}from"./LayerView3D-DhEwtEi6.js";import{p as T}from"./TiledLayerView3D-BXIMfnyU.js";import{y as _}from"./LayerView-QI6cRGb4.js";let s=class extends T(D(_)){constructor(){super(...arguments),this.type="elevation-3d"}get tileInfo(){return this.layer.tileInfo}initialize(){var a,o,c;const e=this.view,t=(a=e.map)==null?void 0:a.allLayers,i=t&&t.includes(this.layer),r=(c=(o=e.map)==null?void 0:o.ground)==null?void 0:c.layers,l=r&&r.includes(this.layer);if(i&&!l){const y=new u("layerview:elevation-layer-only",`3D elevation layer '${this.layer.id}' can only be added to layers in map.ground`);this.addResolvingPromise(Promise.reject(y))}this._lercDecoder=f(e.resourceController),this._addTilingSchemeMatchPromise()}destroy(){this._lercDecoder=g(this._lercDecoder)}async fetchTile(e,t){const i=this.layer;if(m(i)){const o=await i.fetchTile(e[0],e[1],e[2],{noDataValue:d,signal:t.signal});return p(t)?void v.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true."):o}const r=this.getTileUrl(e),l=await t.requester.request(r,"binary",t),a=await this._lercDecoder.decode(l,{noDataValue:d},t.signal);if(a)return new w(a);throw new Error("LERC decoding failed")}};n([h()],s.prototype,"layer",void 0),n([h()],s.prototype,"tileInfo",null),s=n([$("esri.views.3d.layers.ElevationLayerView3D")],s);const E=s;export{E as default};
